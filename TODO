  ✓ clean up tmp files
  ✓ fix the build / update_symlink ergonomics
  ✓ upload to github
  ✓ support ? for keyboard help
  ✓ support c to compile
  ✓ add a license
  ✓ single keystroke to ingest new code from clipboard "R"
  ✓ links to discord/twitch/yt in repo
  ✓ triple-quoted strings
  ✓ implement "/" for search -- YES! we have search
  ✓ block ends at the next one
  ✓ the v thing because things going together
  ✓ fit the block on the screen
  ✓ parametrize the project / binary / code names, etc
    ✓ parse .cmpr/conf
    ✓ support --conf <alternate_conf_file>
      ✓ fix build
        ✓ fix or 'r' get_code
    ✓ Python or C? later: arbitrary block defn
    ✓ eventually the config will just be a block (?) but for now we'll use .cmpr in the current directory
    ✓ finish all the settings
  ✓ push v2-b1 to github
  ✓ parametrize block_comment_part same as finding the blocks
  ✓ clean up the code a bit
  ✓ use it for chess_bpa
  ✓ test it with a Python project
  ✓ push v2 to github
  ✓ add "init"
    ✓ touch .cmpr/conf
    ✓ create .cmpr/{revs,tmp}
    ✗ set those conf vars and save
  ✓ add 'g'
  ✓ add 'G' (w/o numeric args)
  ✓ genericize the arena allocation of array types
      move this back into library code
  ✓ Python crashing when only """ in block
  ✓ "library" support
    ✓ list of files in the conf, bring in blocks from each one in order
    ✓ block type is per file, not per project
    ✓ language build tool will manage dependencies, so we don't have any feature work here
  ✓ directory tree support: support projects in directories by reading everything into one buffer
  ✓ don't symlink but just copy the new version (e.g. we shouldn't be committing a symlink for the main project file in git)
  ✓ support an alternative conf file location
  ✓ handle syntax highlighting / filetype issues: put an extension the tmp filename
  ✓ push v3 to github
  ✓ decide how to handle structs / other things that aren't functions
  ✓ add "?"
  ✓ pagination
    ✓ implement space/b
  ✓ add a build timestamp to the version string
  ✓ add a Makefile
  ✓ publish TODO in the repo
  ✓ push v4
  ✓ make sure there is at least one file (in check_conf_vars)
  ✓ when the conf file doesn't exist report the error better
  ✓ push v4 again
  ✓ add JS support
    ✓ test via 2048 demo
  ✓ add 
    ✓ --print-block N
    ✓ --count-blocks
    ✓ --print-code N
    ✓ --print-comment N
    ✓ --find-block <literal>
  ✓ add :bootstrap
    ✓ try mawk manually
    ✓ local bootstrap script for cmpr itself
    ✓ system() -> send to model (currently send_to_clipboard)
  ✓ handle the multiple search result issue -- just make 'n' and 'N' work
    ✗ the search should show the current matching line, in the center of the display
    ✗ n goes to the next, which may or may not be in the same block
    ✗ enter sets the current index but can also set a pagination mode
    ✗ e might also do a +N or equivalent
  ✓ when switching blocks we should reset pagination (per-block(?))
  ✓ R should ensure that there is a newline at the end
  ✓ fix ruler position bug
  ✓ first version of bootstrap can be the first extended (ex commands) :bootstrap
  ✓ push v5
  ✓ fix --init
  ✓ 'v' by accident is annoying
  ✓ push v6
  ✓ intro video -- youtube (language switch)
  ✓ fix json_o_extend interface
  ✓ support API usage
  ✓ support LLM rewrite via API
      ✓ pick a config approach
      ✓ #send_to_llm
          ✓ clean up JSON lib
          ✓ store API req/res pairs
          ✓ create dirs on startup
          ✓ test JSON parsing and handle the response
          ✓ handle errors
          ✓ strip the markdown
          ✗ make r not repeat (rate limit)
          ✓ add GPT4
          ✓ bootstrap
  ✓ probably remove the delay after llm
  ✓ push code
  ✓ replace libcurl with curl
  ✓ update README
  ✓ fix 'h' (it's '?' not 'h'...)
  ✓ strip config directories
  ✓ support arrow keys in :model
  ✓ the respond with OK thing
  ✓ remove tmpdir and revdir; use cmprdir
  ✓ push v7
  ✓ fix build issues:
    ✓ clang
    ✓ asan
    ✓ dist directory
  ✓ ? still lists undo, v, S
  ✓ DATALOSS.md and systemprompt should be in repo
  ✓ push
  ✓ unbreak pagination after I edited the code
  ✓ push
  ✓ support ollama API
  ✓ support ollamas conf var
  ✓ support llama.cpp server
  ✓ update :model
  ✓ block references
    ✓ add :expandrefs to see it
    ✓ implement expand_refs()
    ✓ update comment_to_prompt to expand refs
    ✓ test using langtable
      ✓ #find_blocks_language
      ✓ #tmp_filename
      ✓ #block_comment_part
  ✓ add depth to expand_refs_rec
  ✓ make chase_refs support :code and :all
    ✓ add block_by_id
    ✓ add block_transforms(b,f)
  ✓ add :expand, :toprefs, :inrefs
  ✓ add "#" feature







WHAT WE ARE CURRENTLY DOING:
  → basic diff features
    → add "U" with a listing, most-recent first
      → checksum and index blocks
        ✓ design how it will work
        ✓ implement checksums for blocks, lines, files (in #checksum_code)
        ✓ implement checksums for each rev
      → implement rev-chron linear search
      → implement "find previous version of block"

        global context block

    "Error: Block does not belong to any file." happened
      context: added a space before a "#" in the last markdown block in the last file, then :wq
    Arena overflow for spans
    actually index block ids
    make "#" jump to block by id (or maybe a menu!)
    make "@" be a menu of references from this block
    "@@" or sth is menu of blocks that refer to us
    automatically suggest regen of stale downstream blocks
    prt_exit() is probably actually a good idea
    turn off bootstrap on startup
    explore "prompt palette" idea
    fix the first-line thing on @id:code
    replace spans arena with generic implementation
  ✓ make .n start at 0
    keep ollama model loaded
    make LLM calls asynchronous
    clipboard model set automatically
    rename bootstrap to genesis(?) projblock(?) global context block
    add :allfiles to autopopulate conf, and an empty state
    cmprdir should be auto-set
    ~/.cmpr for top-level conf
    send everything to LLM and create a bootstrap? ctags?
    ship with some kind of bootstrap bootstrap?
    jumping between files not just blocks
    idea: maybe go from spec to list of callable functions, approve this, then implementation; allows injecting library call documentation
    idea: (maybe optionally) put the cmp highwater in the ruler and then start unleaking span allocations
  → feature: checksum for block content in memory and on disk
      ✓ pick a placeholder or simple approach: SipHash?
      ✓ get something to compile
      ✓ checksum blocks
      → checksum files, blocks, lines in all revs


  → dataloss pass: think through everything; addresses control issue  4 4 16
    = user visibility into what's in the files and when it got there
    = "diffs and dates"
    Q: if GPT writes the code, how can we trust it?
    A? -- we have invariants that are upheld mainly by large-scale structure
    Another more specific answer is as follows: we structure the problem in such a way that there is either a solution or there is no side effect.
    This is the principle of least privilege and it means you can delegate authority, for example, to a postscript program and trust that it will not access the network.



    QA on --init and setting language
    make cmprdir be optional, defaulting to .cmpr/
    test / fix check_conf_vars (e.g. cmprdir missing)
    support other AIs via an external script
    idea: when a TODO item is done, put the relevant blocks in a comment
    IDE mode
    think about LLM refactoring
    first steps on the road total rev awareness 4 4 16
    basic summarize feature (at least vjjjjj should give you something maximizing cols*5 chars worth)
    bring compiler errors into the workflow (line no -> block, etc) 3 3 9
    try more with VSCode support  4 2 8
    add translations into ~every language 4 2 8
    add 'd', 'p', 'P' so that moving around blocks is easy  4 2 8
    add o / O for block insertions  3 2 6



















Current TODO:

Product
Benefit: 1-4
Difficulty: 1-4

    Adv  Ben  Diff
    ---  ---  ----
    16   4    4    dataloss pass: think through everything; addresses control issue
         -    -    data loss when two cmprs open (related to rev currency check)
     4   4    1    support markdown or HTML
     8   4    2    handle deleted (or not-yet-created) files sensibly
                   add :tests
                     tests: --init, main loop (j/k/g/G), find and print block features, Python support, [...]
    unified diff stuff
      try getting GPT4 to suggest changes to the comment part
    bug: (mkdir pytest; cd pytest; cmpr --init; cmpr # use Python language with .cmpr/conf)
    add markdown support
    put something in the README about coexistence with SCMs/git
    just create revdir and tmpdir if they don't exist
    example blocks should be in the README (maybe the arg parsing one)
    *** soft launch ***
    try more with VSCode support
    librification / cleanup
    "total rev awareness"
      start with bpe(?)
      https://en.wikipedia.org/wiki/Johnson%E2%80%93Lindenstrauss_lemma
      start by determining which revs go to which files
      is a set of features starting from an index or rolling hash
      indexed at newlines(?)
      subsumes diff features, data loss prevention on save, block -> rev indexing
      conflicts with catalog file idea (?)
    not mint a rev if block unchanged / basic diff features "d" for diff (by def. w/ prev rev) of block
    add u for "R"
    ✓ sort the revdir and print everything
      add a catalog file in revs/catalog
      every rev gets written to it, and we parse it on startup
    might as well start with a (tabular-programmed) set of them:
      :bootstrap :addfile :addlib :help :config
    actually use the arena allocation to e.g. reclaim cmp space (clipboard handling, etc)
    "manual fixup" as a feature: put a "you got this wrong" in the prompt but not the block comment
      can piggyback on hashtags features
    fix bug: an empty file (e.g. index.html) block is reported belonging to prev, non-empty file
    add translations into ~every language
    publish training data?
      as separate repo
    asking for tmpdir and revdir is dumb now that we have --init; just default them
    settings mode works by opening the conf file in a buffer and syntax checking it after (visudo style)
    to "file:" we add "collection:" (library, folder, ...) which is exactly the same but adds a "dir"
      (By "dir" we mean a level of hierarchy in the UI that's closed by default.)
      (We can use "lib:" so for example "library: spanio.c" would give a neat "spanio> " in the UI.)
    add a ":addfile" or something where we repeat the question about language
    add "settings mode" but for files
    deal with the function declaration / header issue -> general-purpose code hygiene transforms
    support having "principles" that are checked/enforced by the LLM
      only on block changes for efficiency / over all code by special command
    think about using the LLM to write the comment and not just the code (i.e. 'r' and 'R')
    check if current file == latest rev on load, if not store a new rev
    support API usage
    parametrize comment_to_prompt
    make the prompts all config -- or all files in .cmpr
    editor should be a config
    add o / O for block insertions
      works the same as editing a block except the file starts empty and instead of replacing we insert
      once we show the file in the ruler, always adds to the current file
    add support for numbers (e.g. for G, d, etc)
    support "extended" commands starting with ":"
    add 'd', 'p', 'P' so that moving around blocks is easy
    visual selection mode works with "r"
    visual selection mode works with "e"
    sometimes you want to unconditionally append, not replace the code part (p? v?)
    something like "*" in vim, also "gd"
    consider metadata on blocks: prompt "wrapper" functions, custom block end, etc
    tagging blocks
    bring compiler errors into the workflow (line no -> block, etc)
      stderr into a file into a "temporary" block
      heuristics identify errors and line numbers in a compiler-agnostic way
    FIX code formatting issues once and for all
    ****** have cmpr handle it's own TODO items ******
    support system prompts / "spanio_prompt" and "code_prompt" / "bootstrap" prompt
    add to the prompt all the library methods that there are, and let it either use only those OR forward declare any additions
    think about library ergonomics around prt2cmp (belongs in a library TODO not here)
    find the right way to handle blocks (language agnostic, ...)
    TOC presentation of blocks (LLM summarization???)
    intro video -- mp4 or gif in repo
    basic stats on blocks e.g. comment-code ratio
    video note: we have done things (not 2048) out of training set
    issue with the exec bit on bootstrap.sh
    experiment with GPT4 finetunes
    Speaking of classifiers: let's say two blocks are added in different branches to the same empty file.
    A classifier can be trained to predict which of the mutually agnostic blocks should be first.
    Otherwise, a human must make the choice, or a policy which privileges one side as the server.
